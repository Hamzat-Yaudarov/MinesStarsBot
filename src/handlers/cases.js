import { MAIN_MENU, CASE100_REWARDS, CASE700_WEIGHTS } from '../data/constants.js';
import { getUser, updateUser, assignRandomNftOfType } from '../db/index.js';
import { weightedChoice } from '../utils/random.js';

function sleep(ms){ return new Promise(r=>setTimeout(r, ms)); }

export function registerCases(bot) {
  bot.hears(MAIN_MENU.CASES, async (ctx) => {
    await ctx.reply('üéÅ –ö–µ–π—Å—ã', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üíº –ö–µ–π—Å –∑–∞ 100‚≠ê', callback_data: 'case:100' }],
          [{ text: 'ü™™ –ö–µ–π—Å –∑–∞ 700‚≠ê (NFT)', callback_data: 'case:700' }]
        ]
      }
    });
  });

  bot.on('callback_query', async (ctx, next) => {
    const data = ctx.callbackQuery?.data || '';
    if (!data.startsWith('case:')) return next();
    const user = await getUser(ctx.from.id);
    if (!user) { await ctx.answerCbQuery('–ù–∞–∂–º–∏—Ç–µ /start'); return; }

    if (data === 'case:100') {
      const { withLock, isLocked } = await import('../utils/locks.js');
      if (isLocked(ctx.from.id, 'cases')) { await ctx.answerCbQuery('–£–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å'); return; }
      await withLock(ctx.from.id, 'cases', async () => {
        if (Number(user.balance_stars||0) < 100) { await ctx.answerCbQuery('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚≠ê'); return; }
        await updateUser(user.tg_id, { balance_stars: Number(user.balance_stars) - 100 });
        await ctx.editMessageText('üéÅ –ö–µ–π—Å 100‚≠ê...');
        await sleep(300); await ctx.editMessageText('üéÅ –ö–µ–π—Å 100‚≠ê... üîÑ');
        const outcomes = CASE100_REWARDS.map(x => [x.amount, x.weight]);
        const reward = weightedChoice(outcomes);
        await updateUser(user.tg_id, { balance_stars: Number(user.balance_stars||0) + reward });
        await ctx.editMessageText(`üéâ –í—ã–∏–≥—Ä—ã—à: +${reward}‚≠ê`);
        await ctx.answerCbQuery('–û—Ç–∫—Ä—ã—Ç–æ');
      });
      return;
    }

    if (data === 'case:700') {
      const { withLock, isLocked } = await import('../utils/locks.js');
      if (isLocked(ctx.from.id, 'cases')) { await ctx.answerCbQuery('–£–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å'); return; }
      await withLock(ctx.from.id, 'cases', async () => {
        const fresh = await getUser(ctx.from.id);
        if (Number(fresh.balance_stars||0) < 700) { await ctx.answerCbQuery('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚≠ê'); return; }
        await ctx.editMessageText('ü™™ –ö–µ–π—Å 700‚≠ê (NFT)...');
        await sleep(300); await ctx.editMessageText('ü™™ –ö–µ–π—Å 700‚≠ê (NFT)... üîÑ');
        const pick = weightedChoice(CASE700_WEIGHTS.map(x => [x.type, x.weight]));
        const nft = await assignRandomNftOfType(pick, user.tg_id);
        if (!nft) {
          await ctx.editMessageText('üôÅ –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö NFT —ç—Ç–æ–≥–æ —Ç–∏–ø–∞. –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.');
          await ctx.answerCbQuery('–ù–µ—Ç NFT');
          return;
        }
        // Deduct only after NFT reserved
        const latest = await getUser(ctx.from.id);
        if (Number(latest.balance_stars||0) < 700) { await ctx.answerCbQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠ê'); return; }
        await updateUser(latest.tg_id, { balance_stars: Number(latest.balance_stars) - 700 });
        await ctx.editMessageText(`üéâ –í—ã–ø–∞–ª NFT: ${nft.type}\nID: ${nft.id}\n–°—Å—ã–ª–∫–∞: ${nft.tg_link}`);
        await ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');
      });
      return;
    }
  });
}

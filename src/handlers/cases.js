import { MAIN_MENU } from '../data/constants.js';
import { getUser, updateUser, sumTodayDepositsStars, hasClaimedFreeCaseToday, markFreeCaseClaimed } from '../db/index.js';
import { weightedChoice, randInt } from '../utils/random.js';

function sleep(ms){ return new Promise(r=>setTimeout(r, ms)); }

export function registerCases(bot) {
  bot.hears(MAIN_MENU.CASES, async (ctx) => {
    await ctx.reply('üéÅ –ö–µ–π—Å—ã', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üÜì –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π (–¥–µ–ø–æ–∑–∏—Ç ‚â• 200‚≠ê)', callback_data: 'case:free' }],
          [{ text: 'üíº –ö–µ–π—Å –∑–∞ 150‚≠ê', callback_data: 'case:150' }],
          [{ text: 'üíº –ö–µ–π—Å –∑–∞ 250‚≠ê', callback_data: 'case:250' }]
        ]
      }
    });
  });

  bot.on('callback_query', async (ctx, next) => {
    const data = ctx.callbackQuery?.data || '';
    if (!data.startsWith('case:')) return next();
    const user = await getUser(ctx.from.id);
    if (!user) { await ctx.answerCbQuery('–ù–∞–∂–º–∏—Ç–µ /start'); return; }

    if (data === 'case:free') {
      if (await hasClaimedFreeCaseToday(user.tg_id)) {
        await ctx.answerCbQuery('–°–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏');
        return;
      }
      const deposited = await sumTodayDepositsStars(user.tg_id);
      if (deposited < 200) {
        await ctx.answerCbQuery('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ 200‚≠ê');
        return;
      }
      const m = await ctx.editMessageText('üéÅ –û—Ç–∫—Ä—ã–≤–∞–µ–º...');
      await sleep(400); await ctx.editMessageText('üéÅ –û—Ç–∫—Ä—ã–≤–∞–µ–º... ‚ú®');
      await sleep(400); await ctx.editMessageText('üéÅ –û—Ç–∫—Ä—ã–≤–∞–µ–º... ‚ú®‚ú®');
      const reward = randInt(10, 75);
      await updateUser(user.tg_id, { balance_stars: Number(user.balance_stars||0) + reward });
      await markFreeCaseClaimed(user.tg_id);
      await ctx.editMessageText(`‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å: +${reward}‚≠ê`);
      await ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');
      return;
    }

    if (data === 'case:150') {
      if (Number(user.balance_stars||0) < 150) { await ctx.answerCbQuery('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚≠ê'); return; }
      await updateUser(user.tg_id, { balance_stars: Number(user.balance_stars) - 150 });
      const m = await ctx.editMessageText('üéÅ –ö–µ–π—Å 150‚≠ê...');
      await sleep(300); await ctx.editMessageText('üéÅ –ö–µ–π—Å 150‚≠ê... üîÑ');
      const values150 = [0, 15, 25, 50, 100, 200, 225];
      const base150 = 20; const step150 = 2; // ÔøΩÔøΩ–æ—á—Ç–∏ —Ä–∞–≤–Ω—ã–µ —à–∞–Ω—Å—ã, —á—É—Ç—å –≤—ã—à–µ —É –º–µ–Ω—å—à–∏—Ö
      const outcomes = values150.sort((a,b)=>a-b).map((v,i)=>[v, base150 - step150*i]);
      const reward = weightedChoice(outcomes);
      if (reward > 0) await updateUser(user.tg_id, { balance_stars: Number(user.balance_stars||0) + reward });
      await ctx.editMessageText(reward > 0 ? `üéâ –í—ã–∏–≥—Ä—ã—à: +${reward}‚≠ê` : 'üôÅ –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ');
      await ctx.answerCbQuery('–û—Ç–∫—Ä—ã—Ç–æ');
      return;
    }

    if (data === 'case:250') {
      if (Number(user.balance_stars||0) < 250) { await ctx.answerCbQuery('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚≠ê'); return; }
      await updateUser(user.tg_id, { balance_stars: Number(user.balance_stars) - 250 });
      const m = await ctx.editMessageText('üéÅ –ö–µ–π—Å 250‚≠ê...');
      await sleep(300); await ctx.editMessageText('üéÅ –ö–µ–π—Å 250‚≠ê... üîÑ');
      const values250 = [100, 150, 175, 275, 300, 350];
      const base250 = 18; const step250 = 2; // –ø–æ—á—Ç–∏ —Ä–∞–≤–Ω—ã–µ —à–∞–Ω—Å—ã, —á—É—Ç—å –≤—ã—à–µ —É –º–µ–Ω—å—à–∏—Ö
      const outcomes = values250.sort((a,b)=>a-b).map((v,i)=>[v, base250 - step250*i]);
      const reward = weightedChoice(outcomes);
      await updateUser(user.tg_id, { balance_stars: Number(user.balance_stars||0) + reward });
      await ctx.editMessageText(`üéâ –í—ã–∏–≥—Ä—ã—à: +${reward}‚≠ê`);
      await ctx.answerCbQuery('–û—Ç–∫—Ä—ã—Ç–æ');
      return;
    }
  });
}

import { MAIN_MENU, LADDER_ALLOWED_BETS_STARS, LADDER_LEVELS, LADDER_CHOICES, LADDER_MULTIPLIERS } from '../data/constants.js';
import { getUser, updateUser, getActiveLadderGame, createLadderGame, updateLadderGame } from '../db/index.js';

function sleep(ms){ return new Promise(r=>setTimeout(r, ms)); }

function randomLayout() {
  // layout: { "1": [brokenIndices], ... }
  const layout = {};
  for (let lvl = 1; lvl <= LADDER_LEVELS; lvl++) {
    const broken = new Set();
    while (broken.size < lvl) {
      broken.add(Math.floor(Math.random() * LADDER_CHOICES) + 1);
    }
    layout[String(lvl)] = Array.from(broken);
  }
  return layout;
}

function betKeyboard() {
  const rows = [];
  for (let i = 0; i < LADDER_ALLOWED_BETS_STARS.length; i += 3) {
    rows.push(LADDER_ALLOWED_BETS_STARS.slice(i, i+3).map(v => ({ text: `${v}‚≠ê`, callback_data: `ladder:bet:${v}` })));
  }
  return { inline_keyboard: rows };
}

function levelKeyboard(level) {
  const row = [];
  for (let i = 1; i <= LADDER_CHOICES; i++) row.push({ text: String(i), callback_data: `ladder:pick:${level}:${i}` });
  return { inline_keyboard: [row, [{ text: 'üíº –ó–∞–±—Ä–∞—Ç—å', callback_data: 'ladder:cash' }]] };
}

export function registerGames(bot) {
  bot.hears(MAIN_MENU.GAMES, async (ctx) => {
    await ctx.reply('üé≤ –ò–≥—Ä—ã', { reply_markup: { inline_keyboard: [[{ text: 'ü™ú –õ–µ—Å–µ–Ω–∫–∞', callback_data: 'ladder:start' }]] } });
  });

  bot.on('callback_query', async (ctx, next) => {
    const data = ctx.callbackQuery?.data || '';
    if (!data.startsWith('ladder:')) return next();
    const user = await getUser(ctx.from.id);
    if (!user) { await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ /start'); return; }

    if (data === 'ladder:start') {
      const active = await getActiveLadderGame(user.tg_id);
      if (active) { await ctx.editMessageText('–ò–¥—ë—Ç –∏–≥—Ä–∞ –õ–µ—Å–µ–Ω–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:', { reply_markup: levelKeyboard(active.level + 1) }); return; }
      await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:', { reply_markup: betKeyboard() });
      return ctx.answerCbQuery();
    }

    if (data.startsWith('ladder:bet:')) {
      const bet = Number(data.split(':')[2]);
      if (!LADDER_ALLOWED_BETS_STARS.includes(bet)) { await ctx.answerCbQuery('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç–∞–≤–∫–∞'); return; }
      if (Number(user.balance_stars||0) < bet) { await ctx.answerCbQuery('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠ê'); return; }
      const layout = randomLayout();
      await updateUser(user.tg_id, { balance_stars: Number(user.balance_stars) - bet });
      const game = await createLadderGame(user.tg_id, bet, layout);
      await ctx.editMessageText(`ü™ú –õ–µ—Å–µ–Ω–∫–∞ ‚Äî —É—Ä–æ–≤–µ–Ω—å 1 –∏–∑ ${LADDER_LEVELS}\n–°—Ç–∞–≤–∫–∞: ${bet}‚≠ê\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:`, { reply_markup: levelKeyboard(1) });
      return ctx.answerCbQuery('–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞');
    }

    if (data === 'ladder:cash') {
      const game = await getActiveLadderGame(user.tg_id);
      if (!game) { await ctx.answerCbQuery('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); return; }
      if (game.level <= 0) { await ctx.answerCbQuery('–ù–µ—á–µ–≥–æ –∑–∞–±–∏—Ä–∞—Ç—å'); return; }
      const mult = LADDER_MULTIPLIERS[game.level - 1];
      const payout = Math.floor(Number(game.bet_stars) * mult);
      await updateUser(user.tg_id, { balance_stars: Number(user.balance_stars||0) + payout });
      await updateLadderGame(game.id, { status: 'cashed' });
      await ctx.editMessageText(`‚úÖ –ó–∞–±—Ä–∞–Ω–æ: ${payout}‚≠ê (—É—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ: ${game.level}, x${mult.toFixed(2)})`);
      return ctx.answerCbQuery('–í—ã–ø–ª–∞—Ç–∞');
    }

    if (data.startsWith('ladder:pick:')) {
      const [, , levelStr, idxStr] = data.split(':');
      const level = Number(levelStr);
      const pick = Number(idxStr);
      const game = await getActiveLadderGame(user.tg_id);
      if (!game) { await ctx.answerCbQuery('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); return; }
      if (level !== Number(game.level) + 1) { await ctx.answerCbQuery('–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å'); return; }
      const layout = game.layout;
      const broken = (layout[String(level)] || []);

      await ctx.editMessageText(`ü™ú –£—Ä–æ–≤–µ–Ω—å ${level} ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º...`);
      await sleep(400);

      if (broken.includes(pick)) {
        await updateLadderGame(game.id, { status: 'lost' });
        await ctx.editMessageText(`üí• –õ–µ—Å—Ç–Ω–∏—Ü–∞ —Å–ª–æ–º–∞–Ω–∞ –Ω–∞ ${level}-–º —É—Ä–æ–≤–Ω–µ. –°—Ç–∞–≤–∫–∞ —Å–≥–æ—Ä–µ–ª–∞.`);
        return ctx.answerCbQuery('–ü—Ä–æ–∏–≥—Ä—ã—à');
      }

      const nextLevel = level;
      await updateLadderGame(game.id, { level: nextLevel });

      if (nextLevel >= LADDER_LEVELS) {
        const mult = LADDER_MULTIPLIERS[nextLevel - 1];
        const payout = Math.floor(Number(game.bet_stars) * mult);
        await updateUser(user.tg_id, { balance_stars: Number(user.balance_stars||0) + payout });
        await updateLadderGame(game.id, { status: 'cashed' });
        await ctx.editMessageText(`üèÅ –ú–∞–∫—Å–∏–º—É–º! –ü—Ä–æ–π–¥–µ–Ω–æ ${LADDER_LEVELS} —É—Ä–æ–≤–Ω–µ–π. –í—ã–ø–ª–∞—Ç–∞ ${payout}‚≠ê`);
        return ctx.answerCbQuery('–ü–æ–±–µ–¥–∞');
      }

      await ctx.editMessageText(`‚úÖ –£—Ä–æ–≤–µ–Ω—å ${level} –ø—Ä–æ–π–¥–µ–Ω!\n–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: x${LADDER_MULTIPLIERS[nextLevel - 1].toFixed(2)}\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ ${nextLevel+1}:`, { reply_markup: levelKeyboard(nextLevel + 1) });
      return ctx.answerCbQuery('–î–∞–ª–µ–µ');
    }
  });
}

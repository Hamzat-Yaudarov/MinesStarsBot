import { MAIN_MENU, MC_PER_STAR, PICKAXE_LEVEL_COST_MC } from '../data/constants.js';
import { getUser, updateUser } from '../db/index.js';

const awaiting = new Map(); // userId -> { dir: 'mc2stars'|'stars2mc' }

export function registerShop(bot) {
  bot.hears(MAIN_MENU.SHOP, async (ctx) => {
    const user = await getUser(ctx.from.id);
    if (!user) return ctx.reply('–°–Ω–∞—á–∞–ª–∞ /start');

    const lvl = Number(user.pickaxe_level);
    let text = 'üõí –ú–∞–≥–∞–∑–∏–Ω\n';
    if (lvl === 0) {
      text += '–ö–∏—Ä–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ö—É–ø–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∏—Ä–∫—É –∑–∞ 10,000 MC –∏–ª–∏ 50 ‚≠ê\n';
    } else {
      text += `–ö–∏—Ä–∫–∞: —É—Ä–æ–≤–µ–Ω—å ${lvl}\n`;
      if (lvl < 10) {
        const next = lvl + 1;
        const cost = PICKAXE_LEVEL_COST_MC[next];
        text += `–°–ª–µ–¥—É—é—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: —É—Ä. ${next} ‚Äî ${cost.toLocaleString()} MC\n`;
      } else {
        text += '–ö–∏—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è\n';
      }
    }

    const buttons = [];
    if (lvl === 0) {
      buttons.push([{ text: '‚õèÔ∏è –ö—É–ø–∏—Ç—å –∫–∏—Ä–∫—É (10,000 MC)', callback_data: 'shop:pickaxe:mc' }]);
      buttons.push([{ text: '‚õèÔ∏è –ö—É–ø–∏—Ç—å –∫–∏—Ä–∫—É (50 ‚≠ê)', callback_data: 'shop:pickaxe:stars' }]);
    } else if (lvl < 10) {
      const next = lvl + 1;
      const cost = PICKAXE_LEVEL_COST_MC[next];
      buttons.push([{ text: `üîß –£–ª—É—á—à–∏—Ç—å –¥–æ —É—Ä. ${next} (${cost.toLocaleString()} MC)`, callback_data: `shop:upgrade:${next}` }]);
    }
    buttons.push([{ text: 'üîÑ –û–±–º–µ–Ω MC ‚ÜîÔ∏è ‚≠ê', callback_data: 'shop:exchange' }]);

    await ctx.reply(text, { reply_markup: { inline_keyboard: buttons } });
  });

  bot.on('callback_query', async (ctx, next) => {
    const data = ctx.callbackQuery?.data || '';
    if (!data.startsWith('shop:')) return next();
    const user = await getUser(ctx.from.id);
    if (!user) { await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ /start'); return; }

    if (data.startsWith('shop:upgrade:')) {
      const next = Number(data.split(':')[2]);
      const lvl = Number(user.pickaxe_level);
      if (!Number.isInteger(next) || next !== lvl + 1 || next < 1 || next > 10) { await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å', { show_alert: true }); return; }
      const cost = PICKAXE_LEVEL_COST_MC[next];
      if (Number(user.balance_mc||0) < cost) { await ctx.answerCbQuery('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç MC', { show_alert: true }); return; }
      await updateUser(user.tg_id, { balance_mc: Number(user.balance_mc) - cost, pickaxe_level: next });
      await ctx.editMessageText(`‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: —É—Ä. ${lvl} ‚Üí —É—Ä. ${next} (‚àí${cost.toLocaleString()} MC)`);
      return ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');
    }

    if (data === 'shop:exchange') {
      await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:', {
        reply_markup: {
          inline_keyboard: [
            [{ text: `MC ‚Üí ‚≠ê (1‚≠ê = ${MC_PER_STAR} MC)`, callback_data: 'shop:exchange:mc2stars' }],
            [{ text: `‚≠ê ‚Üí MC (1‚≠ê = ${MC_PER_STAR} MC)`, callback_data: 'shop:exchange:stars2mc' }]
          ]
        }
      });
      return ctx.answerCbQuery();
    }

    if (data === 'shop:exchange:mc2stars' || data === 'shop:exchange:stars2mc') {
      const dir = data.split(':').pop();
      awaiting.set(ctx.from.id, { dir });
      await ctx.editMessageText(dir === 'mc2stars' ? '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚≠ê –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–∞ MC:' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚≠ê –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤ MC:');
      return ctx.answerCbQuery();
    }

    if (data === 'shop:pickaxe:mc') {
      if (user.pickaxe_level > 0) { await ctx.answerCbQuery('–ö–∏—Ä–∫–∞ —É–∂–µ –∫—É–ø–ª–µ–Ω–∞', { show_alert: true }); return; }
      if (Number(user.balance_mc||0) < 10000) { await ctx.answerCbQuery('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç MC', { show_alert: true }); return; }
      await updateUser(user.tg_id, { balance_mc: Number(user.balance_mc) - 10000, pickaxe_level: 1 });
      await ctx.editMessageText('‚úÖ –ö–∏—Ä–∫–∞ –∫—É–ø–ª–µ–Ω–∞ –∑–∞ 10,000 MC. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–æ–ø–∞—Ç—å!');
      return ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');
    }

    if (data === 'shop:pickaxe:stars') {
      if (user.pickaxe_level > 0) { await ctx.answerCbQuery('–ö–∏—Ä–∫–∞ —É–∂–µ –∫—É–ø–ª–µ–Ω–∞', { show_alert: true }); return; }
      if (Number(user.balance_stars||0) < 50) { await ctx.answerCbQuery('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚≠ê', { show_alert: true }); return; }
      await updateUser(user.tg_id, { balance_stars: Number(user.balance_stars) - 50, pickaxe_level: 1 });
      await ctx.editMessageText('‚úÖ –ö–∏—Ä–∫–∞ –∫—É–ø–ª–µ–Ω–∞ –∑–∞ 50 ‚≠ê. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–æ–ø–∞—Ç—å!');
      return ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');
    }
  });

  bot.on('text', async (ctx, next) => {
    const p = awaiting.get(ctx.from.id);
    if (!p) return next();
    const n = Number((ctx.message.text||'').trim());
    if (!Number.isFinite(n) || n <= 0 || !Number.isInteger(n)) {
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ‚≠ê');
      return;
    }
    const user = await getUser(ctx.from.id);
    if (!user) return; 

    if (p.dir === 'mc2stars') {
      const needMc = n * MC_PER_STAR;
      if (Number(user.balance_mc||0) < needMc) { await ctx.reply(`–ù—É–∂–Ω–æ ${needMc} MC`); return; }
      await updateUser(user.tg_id, {
        balance_mc: Number(user.balance_mc) - needMc,
        balance_stars: Number(user.balance_stars||0) + n
      });
      awaiting.delete(ctx.from.id);
      await ctx.reply(`‚úÖ –û–±–º–µ–Ω: -${needMc} MC ‚Üí +${n} ‚≠ê`);
      return;
    }

    if (p.dir === 'stars2mc') {
      if (Number(user.balance_stars||0) < n) { await ctx.reply('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚≠ê'); return; }
      const gainMc = n * MC_PER_STAR;
      await updateUser(user.tg_id, {
        balance_stars: Number(user.balance_stars) - n,
        balance_mc: Number(user.balance_mc||0) + gainMc
      });
      awaiting.delete(ctx.from.id);
      await ctx.reply(`‚úÖ –û–±–º–µ–Ω: -${n} ‚≠ê ‚Üí +${gainMc} MC`);
      return;
    }
  });
}

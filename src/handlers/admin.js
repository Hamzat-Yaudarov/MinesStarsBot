import { ADMIN_IDS } from '../config.js';
import { NFT_TYPES } from '../data/constants.js';
import { pool, getUser } from '../db/index.js';

const awaiting = new Map(); // adminId -> { mode: 'add_one'|'add_many', type }

function isAdmin(id){ return ADMIN_IDS.includes(Number(id)); }

function adminMenu() {
  return { inline_keyboard: [
    [{ text: '‚Ü©Ô∏è –í –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —á–∞—Å—Ç—å', callback_data: 'admin:back' }],
    [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å NFT', callback_data: 'admin:add_one' }],
    [{ text: 'üì¶ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ NFT', callback_data: 'admin:add_many' }],
    [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin:stats' }]
  ] };
}

function nftTypeButtons(prefix='admin:type') {
  const types = Object.values(NFT_TYPES);
  return { inline_keyboard: types.map(t => [{ text: t, callback_data: `${prefix}:${t}` }]) };
}

export function registerAdmin(bot) {
  bot.hears('üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', async (ctx) => {
    if (!isAdmin(ctx.from.id)) return;
    await ctx.reply('üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', { reply_markup: adminMenu() });
  });

  bot.on('callback_query', async (ctx, next) => {
    const data = ctx.callbackQuery?.data || '';
    if (!data.startsWith('admin:')) return next();
    if (!isAdmin(ctx.from.id)) { await ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞', { show_alert: true }); return; }

    if (data === 'admin:back') {
      await ctx.editMessageText('–í–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —á–∞—Å—Ç—å. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª —Å –º–µ–Ω—é —Å–Ω–∏–∑—É.');
      return ctx.answerCbQuery();
    }

    if (data === 'admin:add_one') {
      awaiting.set(ctx.from.id, { mode: 'add_one' });
      await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø NFT:', { reply_markup: nftTypeButtons('admin:pick') });
      return ctx.answerCbQuery();
    }

    if (data === 'admin:add_many') {
      awaiting.set(ctx.from.id, { mode: 'add_many' });
      await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø NFT –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', { reply_markup: nftTypeButtons('admin:pick') });
      return ctx.answerCbQuery();
    }

    if (data.startsWith('admin:pick:')) {
      const type = data.split(':')[2];
      const p = awaiting.get(ctx.from.id);
      if (!p) { await ctx.answerCbQuery('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞'); return; }
      p.type = type;
      awaiting.set(ctx.from.id, p);
      if (p.mode === 'add_one') {
        await ctx.editMessageText(`–¢–∏–ø: ${type}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É NFT (—É–Ω–∏–∫–∞–ª—å–Ω—É—é, —Ç–µ–ª–µ–≥—Ä–∞–º-—Å—Å—ã–ª–∫—É):`);
      } else {
        await ctx.editMessageText(`–¢–∏–ø: ${type}\n–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫, –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ:`);
      }
      return ctx.answerCbQuery();
    }

    if (data === 'admin:stats') {
      const { rows: u1 } = await pool.query('select count(*)::int as c from users');
      const { rows: u2 } = await pool.query("select count(*)::int as c from users where last_active_at::date = now()::date");
      const { rows: nft } = await pool.query("select type, count(*)::int as c from nfts where assigned=false and reserved=false group by type order by type");
      const lines = [
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Å–µ–≥–æ: ${u1[0].c}`,
        `–ê–∫—Ç–∏–≤–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${u2[0].c}`,
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ NFT:'
      ].concat(nft.map(r => `‚Ä¢ ${r.type}: ${r.c}`));
      await ctx.editMessageText(lines.join('\n'));
      return ctx.answerCbQuery();
    }
  });

  bot.on('text', async (ctx, next) => {
    const p = awaiting.get(ctx.from.id);
    if (!p) return next();
    if (!isAdmin(ctx.from.id)) return next();
    const text = (ctx.message.text||'').trim();
    if (!text) return;

    if (p.mode === 'add_one') {
      const link = text;
      try {
        await pool.query('insert into nfts (type, tg_link) values ($1,$2)', [p.type, link]);
        await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${p.type} ‚Äî ${link}`);
      } catch (e) {
        await ctx.reply('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª—å —Å—Å—ã–ª–∫–∏).');
      }
      awaiting.delete(ctx.from.id);
      return;
    }

    if (p.mode === 'add_many') {
      const links = text.split(/\r?\n/).map(s => s.trim()).filter(Boolean);
      let ok=0, fail=0;
      for (const link of links) {
        try {
          await pool.query('insert into nfts (type, tg_link) values ($1,$2)', [p.type, link]);
          ok++;
        } catch { fail++; }
      }
      awaiting.delete(ctx.from.id);
      await ctx.reply(`–ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—à–Ω–æ: ${ok}, –æ—à–∏–±–æ–∫: ${fail}`);
      return;
    }
  });
}

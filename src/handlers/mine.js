import { MAIN_MENU, DIG_COOLDOWN_MS } from '../data/constants.js';
import { addInventory, getInventory, getUser, updateUser } from '../db/index.js';
import { invSummary, resourceLabel } from '../utils/format.js';
import { generateDrops } from '../services/mining.js';

function sleep(ms){ return new Promise(res=>setTimeout(res, ms)); }

function msToMin(ms){ return Math.max(0, Math.ceil(ms/60000)); }

function mineScreen(user){
  const now = Date.now();
  const last = user.last_dig_at ? new Date(user.last_dig_at).getTime() : 0;
  const left = Math.max(0, DIG_COOLDOWN_MS - (now - last));
  const digLabel = left > 0 ? `‚õè –ö–æ–ø–∞—Ç—å (‚è≥ ${msToMin(left)}–º)` : '‚õè –ö–æ–ø–∞—Ç—å';
  const text = `–®–∞—Ö—Ç–∞\n–ö–∏—Ä–∫–∞: —É—Ä–æ–≤–µ–Ω—å ${user.pickaxe_level}\n–ö–æ–ø–∞—Ç—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 3 —á–∞—Å–∞.`;
  const kb = { inline_keyboard: [
    [{ text: digLabel, callback_data: 'mine:dig' }],
    [{ text: 'üí∞ –ü—Ä–æ–¥–∞—Ç—å', callback_data: 'open_sell' }]
  ]};
  return { text, kb };
}

export function registerMine(bot) {
  bot.hears(MAIN_MENU.MINE, async (ctx) => {
    const user = await getUser(ctx.from.id);
    if (!user) return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start');
    if (user.pickaxe_level === 0) {
      return ctx.reply('–®–∞—Ö—Ç–∞\n–ö–∏—Ä–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ö–æ–ø–∞—Ç—å –Ω–µ–ª—å–∑—è –±–µ–∑ –∫–∏—Ä–∫–∏.', {
        reply_markup: { inline_keyboard: [[{ text: 'üõí –í –º–∞–≥–∞–∑–∏–Ω', callback_data: 'nav:shop' }]] }
      });
    }
    const { text, kb } = mineScreen(user);
    await ctx.reply(text, { reply_markup: kb });
  });

  bot.on('callback_query', async (ctx, next) => {
    const data = ctx.callbackQuery?.data || '';
    if (!data.startsWith('mine:') && data !== 'nav:shop') return next();
    const user = await getUser(ctx.from.id);
    if (!user) { await ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ /start', { show_alert: true }); return; }

    if (data === 'nav:shop') {
      await ctx.answerCbQuery('–û—Ç–∫—Ä—ã–≤–∞—é –º–∞–≥–∞–∑–∏–Ω');
      await ctx.telegram.sendMessage(ctx.chat.id, 'üõí –ú–∞–≥–∞–∑–∏–Ω –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É');
      return;
    }

    if (data === 'mine:dig') {
      if (user.pickaxe_level === 0) {
        await ctx.answerCbQuery('–ù–µ—Ç –∫–∏—Ä–∫–∏. –ö—É–ø–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.', { show_alert: true });
        return;
      }
      const now = Date.now();
      const last = user.last_dig_at ? new Date(user.last_dig_at).getTime() : 0;
      const left = Math.max(0, DIG_COOLDOWN_MS - (now - last));
      if (left > 0) {
        const { kb } = mineScreen(user);
        try { await ctx.editMessageReplyMarkup(kb); } catch {}
        await ctx.answerCbQuery(`–†–∞–Ω–æ –∫–æ–ø–∞—Ç—å. –û—Å—Ç–∞–ª–æ—Å—å ~${msToMin(left)} –º–∏–Ω.`, { show_alert: true });
        return;
      }

      // per-user lock
      const { withLock, isLocked } = await import('../utils/locks.js');
      if (isLocked(ctx.from.id, 'mine')) { await ctx.answerCbQuery('–ò–¥—ë—Ç –∫–æ–ø–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', { show_alert: true }); return; }

      const anim = await ctx.reply('‚õè –ö–æ–ø–∞—é');
      const frames = ['‚õè –ö–æ–ø–∞—é', '‚õè –ö–æ–ø–∞—é.', '‚õè –ö–æ–ø–∞—é..', '‚õè –ö–æ–ø–∞—é...'];
      let running = true;
      // Start animation loop
      (async () => {
        let i = 0; let t = 0;
        while (running && t < 12) { // ~12 ticks ~ 4-5s
          try { await ctx.telegram.editMessageText(ctx.chat.id, anim.message_id, undefined, frames[i]); } catch {}
          i = (i + 1) % frames.length; t++;
          await sleep(350);
        }
      })();

      // Compute drops
      const { drops, usedMc, cap } = generateDrops(user.pickaxe_level);
      await updateUser(ctx.from.id, { last_dig_at: new Date().toISOString() });
      if (Object.keys(drops).length) await addInventory(ctx.from.id, drops);

      running = false;
      const lines = Object.entries(drops).map(([k,v]) => `+ ${v} ${resourceLabel(k)}`);
      const inv = await getInventory(ctx.from.id);
      const result = [
        'üéâ –î–æ–±—ã—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
        ... (lines.length ? [''].concat(lines) : ['\n–°–µ–≥–æ–¥–Ω—è –ø—É—Å—Ç–æ...']),
        '',
        `üíº –¶–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–±—ã—á–∏: ${usedMc} MC (–ª–∏–º–∏—Ç ${cap} MC)`,
        '',
        'üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å',
        invSummary(inv)
      ].join('\n');
      try {
        await ctx.telegram.editMessageText(ctx.chat.id, anim.message_id, undefined, result, {
          reply_markup: { inline_keyboard: [[{ text: 'üí∞ –ü—Ä–æ–¥–∞—Ç—å', callback_data: 'open_sell' }]] }
        });
      } catch {}
      await ctx.answerCbQuery('–ì–æ—Ç–æ–≤–æ');
      return;
    }
  });
}
